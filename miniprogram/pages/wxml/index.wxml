<!--pages/wxml/index.wxml-->
<text>pages/wxml/index.wxml</text>
<!-- <标签名 属性名1=“属性值1” 属性名1=“属性值2” ...>...</标签名> -->

<!-- 简单的文本标签 -->
<text>Hello world</text>

<!-- view 中包含文本标签 -->
<view>
  <text>hello world</text>
</view>

<!-- 带图片属性的标签 -->
<image class="userinfo-avator" src="./image/a.png"></image>

<!-- 通过 {{变量名}} 来做数据绑定-->
<!-- 属性值也可以动态去改变，不过属性值需要包裹在双引号中 -->
<text>当前时间: {{time}}</text>
<text data-test="{{test}}">hello world</text>

<!-- {{里面可以做简单的逻辑运算}} -->
<text>{{ a === 10 ? "变量 a 等于10" : "变量 a 不等于10"}}</text>

<view>
  <text>{{a + b}} + {{a}} + a</text>
</view>

<!-- 条件逻辑 wx:if="{{condition}}" 判断是否渲染该代码块 -->
<view wx:if="{{a > 0}}"> 正 </view>
<view wx:elif="{{a < 0}}"> 负 </view>
<view wx:else>0</view>

<!-- block 标签可以一次判断多个组件 -->
<block wx:if="{{a === 0}}">
  <text>a = 0</text>
  <view>a = {{a}}</view>
</block>

<!-- wx:for 可以绑定一个数组做重复渲染 默认数组下标：index 数组当前项变量名：item -->
<view wx:for="{{array}}">{{index}}: {{item.message}}</view>

<!-- wx:for-index 可以指定当前元素的下标， wx:for-item 可以指定当前元素的变量名-->
<view wx:for="{{array}}" wx:for-item="MyItem" wx:for-index="idx">{{idx}}: {{MyItem.message}}</view>

<block wx:for="{{array}}">
  <view>{{index}}:</view>
  <view> {{item.message}}</view>
</block>

<!-- wx:key 指定列表项项目的唯一标识
字符串 : array 中的某一个属性，唯一且不变
this: item本身， 唯一且不变
-->
<switch wx:for="{{objectArray}}" wx:key="unique">id: {{item.id}}</switch>
<button bindtap="switch"> Switch </button>
<button bindtap="addToFront"> Add to the front </button>

<view>
  <switch wx:for="{{numberArray}}" wx:key="*this">{{item}}</switch>
  <button bindtap="addNumberToFront"> Add number to the front </button>
</view>

<!-- 模板 template -->
<!-- 声明模板 name=""-->
<template name="MyTemplate">
  <view>模板展示1</view>
</template>

<template name="MyTemplate2">
  <view>模板展示=====</view>
</template>

<!-- 使用模板 is="" -->
<block wx:for="{{[1,2,3,4,5]}}">
  <template is="{{item % 2 == 0 ? 'MyTemplate' :'MyTemplate2'}}"></template>
</block>

<!-- 模板导入数据  data=""-->
<template name="TemplateAddData">
  <text>{{index}}: {{msg}}</text>
  <text>Time: {{time}}</text>
</template>

<template is="TemplateAddData" data="{{...obj}}"></template>

<!-- 引用 import 和 include -->
<!-- import 可以在该文件中使用目标文件的 template, 但是不具备传递性 --- C 引用 B，B 引用A，在C中可以使用B定义的 template，在B中可以使用A定义的 template ，但是C不能使用A定义的template  -->
<!-- include 导入目标文件中除了 <template/> <wxs/> 的全部代码，相当于拷贝到 include 位置  -->

<!-- 标签的共同属性 id, class, style, hidden, data-* bind*, catch* -->